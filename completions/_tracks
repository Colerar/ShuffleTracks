#!/usr/bin/env zsh
# Command completion for tracks
# Generated by Clikt

autoload bashcompinit
bashcompinit

__skip_opt_eq() {
    # this takes advantage of the fact that bash functions can write to local
    # variables in their callers
    (( i = i + 1 ))
    if [[ "${COMP_WORDS[$i]}" == '=' ]]; then
          (( i = i + 1 ))
    fi
}

_tracks() {
  local i=1
  local in_param=''
  local fixed_arg_names=()
  local vararg_name=''
  local can_parse_options=1

  while [[ ${i} -lt $COMP_CWORD ]]; do
    if [[ ${can_parse_options} -eq 1 ]]; then
      case "${COMP_WORDS[$i]}" in
        --)
          can_parse_options=0
          (( i = i + 1 ));
          continue
          ;;
        -g|-generate-completion)
          __skip_opt_eq
          (( i = i + 1 ))
          [[ ${i} -gt COMP_CWORD ]] && in_param='-generate-completion' || in_param=''
          continue
          ;;
        -h|--help)
          __skip_opt_eq
          in_param=''
          continue
          ;;
      esac
    fi
    case "${COMP_WORDS[$i]}" in
      dig)
        _tracks_dig $(( i + 1 ))
        return
        ;;
      loginqr)
        _tracks_loginqr $(( i + 1 ))
        return
        ;;
      config)
        _tracks_config $(( i + 1 ))
        return
        ;;
      *)
        (( i = i + 1 ))
        # drop the head of the array
        fixed_arg_names=("${fixed_arg_names[@]:1}")
        ;;
    esac
  done
  local word="${COMP_WORDS[$COMP_CWORD]}"
  if [[ "${word}" =~ ^[-] ]]; then
    COMPREPLY=($(compgen -W '-g -generate-completion -h --help' -- "${word}"))
    return
  fi

  # We're either at an option's value, or the first remaining fixed size
  # arg, or the vararg if there are no fixed args left
  [[ -z "${in_param}" ]] && in_param=${fixed_arg_names[0]}
  [[ -z "${in_param}" ]] && in_param=${vararg_name}

  case "${in_param}" in
    -generate-completion)
      ;;
    --help)
      ;;
    *)
      COMPREPLY=($(compgen -W 'dig loginqr config' -- "${word}"))
      ;;
  esac
}

_tracks_dig() {
  local i=$1
  local in_param=''
  local fixed_arg_names=('url')
  local vararg_name=''
  local can_parse_options=1

  while [[ ${i} -lt $COMP_CWORD ]]; do
    if [[ ${can_parse_options} -eq 1 ]]; then
      case "${COMP_WORDS[$i]}" in
        --)
          can_parse_options=0
          (( i = i + 1 ));
          continue
          ;;
        -v|-video|-vn|-no-video)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -a|-audio|-an|-no-audio)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -s|-subtitle|-sn|-no-subtitle)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -c|-cover|-cn|-no-cover)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -vo|-ao|-so|-co|-only-video|-only-audio|-only-subtitle|-only-cover)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -no-down|-only-info|-nd|-oi)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -multipart|-mt)
          __skip_opt_eq
          (( i = i + 1 ))
          [[ ${i} -gt COMP_CWORD ]] && in_param='-multipart' || in_param=''
          continue
          ;;
        -qe|-qn|-qnd|-quality-exact|-quality-near|-quality-near-down)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -qv|-video-quality)
          __skip_opt_eq
          (( i = i + 1 ))
          [[ ${i} -gt COMP_CWORD ]] && in_param='-video-quality' || in_param=''
          continue
          ;;
        -videocodec|-codec|-cv)
          __skip_opt_eq
          (( i = i + 1 ))
          [[ ${i} -gt COMP_CWORD ]] && in_param='-videocodec' || in_param=''
          continue
          ;;
        -qa|-audio-quality)
          __skip_opt_eq
          (( i = i + 1 ))
          [[ ${i} -gt COMP_CWORD ]] && in_param='-audio-quality' || in_param=''
          continue
          ;;
        -sub-lang|-sl)
          __skip_opt_eq
          (( i = i + 1 ))
          [[ ${i} -gt COMP_CWORD ]] && in_param='-sub-lang' || in_param=''
          continue
          ;;
        -sub-loose|-sub-loose-match|-slm|-sub-strict|-ss)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -sub-weird|-sw|-sub-fallback|-sf)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -zhconvert-enable|-ze|-zhconvert-disable|-zd)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -zhconvert-to|-zt)
          __skip_opt_eq
          (( i = i + 1 ))
          [[ ${i} -gt COMP_CWORD ]] && in_param='-zhconvert-to' || in_param=''
          continue
          ;;
        -zhconvert-keep-origin|-zhconvert-keep|-zk|-zhconvert-only-artifact|-zhconvert-clean|-zoa|-zc)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -clean-up|-only-artifact|-oa|-keep-material|-km)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -skip-mux|-sm|-mux|-m)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -pd|-part-detail|-show-all-parts)
          __skip_opt_eq
          in_param=''
          continue
          ;;
        -p|-part|-parts)
          __skip_opt_eq
          (( i = i + 1 ))
          [[ ${i} -gt COMP_CWORD ]] && in_param='-parts' || in_param=''
          continue
          ;;
        -h|--help)
          __skip_opt_eq
          in_param=''
          continue
          ;;
      esac
    fi
    case "${COMP_WORDS[$i]}" in
      *)
        (( i = i + 1 ))
        # drop the head of the array
        fixed_arg_names=("${fixed_arg_names[@]:1}")
        ;;
    esac
  done
  local word="${COMP_WORDS[$COMP_CWORD]}"
  if [[ "${word}" =~ ^[-] ]]; then
    COMPREPLY=($(compgen -W '-v -video -vn -no-video -a -audio -an -no-audio -s -subtitle -sn -no-subtitle -c -cover -cn -no-cover -vo -ao -so -co -only-video -only-audio -only-subtitle -only-cover -no-down -only-info -nd -oi -multipart -mt -qe -qn -qnd -quality-exact -quality-near -quality-near-down -qv -video-quality -videocodec -codec -cv -qa -audio-quality -sub-lang -sl -sub-loose -sub-loose-match -slm -sub-strict -ss -sub-weird -sw -sub-fallback -sf -zhconvert-enable -ze -zhconvert-disable -zd -zhconvert-to -zt -zhconvert-keep-origin -zhconvert-keep -zk -zhconvert-only-artifact -zhconvert-clean -zoa -zc -clean-up -only-artifact -oa -keep-material -km -skip-mux -sm -mux -m -pd -part-detail -show-all-parts -p -part -parts -h --help' -- "${word}"))
    return
  fi

  # We're either at an option's value, or the first remaining fixed size
  # arg, or the vararg if there are no fixed args left
  [[ -z "${in_param}" ]] && in_param=${fixed_arg_names[0]}
  [[ -z "${in_param}" ]] && in_param=${vararg_name}

  case "${in_param}" in
    -no-video)
      ;;
    -no-audio)
      ;;
    -no-subtitle)
      ;;
    -no-cover)
      ;;
    -only-subtitle)
      ;;
    -only-info)
      ;;
    -multipart)
      ;;
    -quality-near-down)
      ;;
    -video-quality)
      ;;
    -videocodec)
      ;;
    -audio-quality)
      ;;
    -sub-lang)
      ;;
    -sub-loose-match)
      ;;
    -sub-fallback)
      ;;
    -zhconvert-disable)
      ;;
    -zhconvert-to)
      ;;
    -zhconvert-only-artifact)
      ;;
    -only-artifact)
      ;;
    -skip-mux)
      ;;
    -show-all-parts)
      ;;
    -parts)
      ;;
    --help)
      ;;
    url)
      ;;
  esac
}

_tracks_loginqr() {
  local i=$1
  local in_param=''
  local fixed_arg_names=()
  local vararg_name=''
  local can_parse_options=1

  while [[ ${i} -lt $COMP_CWORD ]]; do
    if [[ ${can_parse_options} -eq 1 ]]; then
      case "${COMP_WORDS[$i]}" in
        --)
          can_parse_options=0
          (( i = i + 1 ));
          continue
          ;;
        -h|--help)
          __skip_opt_eq
          in_param=''
          continue
          ;;
      esac
    fi
    case "${COMP_WORDS[$i]}" in
      *)
        (( i = i + 1 ))
        # drop the head of the array
        fixed_arg_names=("${fixed_arg_names[@]:1}")
        ;;
    esac
  done
  local word="${COMP_WORDS[$COMP_CWORD]}"
  if [[ "${word}" =~ ^[-] ]]; then
    COMPREPLY=($(compgen -W '-h --help' -- "${word}"))
    return
  fi

  # We're either at an option's value, or the first remaining fixed size
  # arg, or the vararg if there are no fixed args left
  [[ -z "${in_param}" ]] && in_param=${fixed_arg_names[0]}
  [[ -z "${in_param}" ]] && in_param=${vararg_name}

  case "${in_param}" in
    --help)
      ;;
  esac
}

_tracks_config() {
  local i=$1
  local in_param=''
  local fixed_arg_names=('expr')
  local vararg_name=''
  local can_parse_options=1

  while [[ ${i} -lt $COMP_CWORD ]]; do
    if [[ ${can_parse_options} -eq 1 ]]; then
      case "${COMP_WORDS[$i]}" in
        --)
          can_parse_options=0
          (( i = i + 1 ));
          continue
          ;;
        -h|--help)
          __skip_opt_eq
          in_param=''
          continue
          ;;
      esac
    fi
    case "${COMP_WORDS[$i]}" in
      *)
        (( i = i + 1 ))
        # drop the head of the array
        fixed_arg_names=("${fixed_arg_names[@]:1}")
        ;;
    esac
  done
  local word="${COMP_WORDS[$COMP_CWORD]}"
  if [[ "${word}" =~ ^[-] ]]; then
    COMPREPLY=($(compgen -W '-h --help' -- "${word}"))
    return
  fi

  # We're either at an option's value, or the first remaining fixed size
  # arg, or the vararg if there are no fixed args left
  [[ -z "${in_param}" ]] && in_param=${fixed_arg_names[0]}
  [[ -z "${in_param}" ]] && in_param=${vararg_name}

  case "${in_param}" in
    --help)
      ;;
    expr)
      ;;
  esac
}

complete -F _tracks tracks
